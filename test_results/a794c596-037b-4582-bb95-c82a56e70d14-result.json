{"name": "test_expenses_tokens_invalid_request", "status": "failed", "statusDetails": {"message": "AssertionError", "trace": "self = <tests.test_update_expense.Test_update_expense object at 0x000001E22B67D2B0>\n\n    @allure.description(\"INVALID request => Checking received tokens\")\n    def test_expenses_tokens_invalid_request(self):\n        \"\"\"\n        Test an invalid PUT request without a body and check the error tokens.\n    \n        Steps:\n        1. Send a valid GET request to get the full expense list.\n        2. Choose a random entry from the list and get the expense UID.\n        3. Send an invalid PUT request (body=None).\n        4. Check if the response contains the expected error tokens: ['message', 'status', 'description'].\n        \"\"\"\n        result_get_expense = Open_api_expense.get_expense_list(0, 0)\n        check_data = result_get_expense.json()\n        current_count = check_data[\"meta\"][\"current_count\"]\n        expense_uid = check_data[\"expenses\"][random.randint(0, current_count-1)][\"uid\"]\n        result_update = Open_api_expense.put_update_expense(expense_uid, None)\n>       Checking.check_json_token(result_update, ['message', 'status', 'description'])\n\ntests\\test_update_expense.py:119: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [400]>, expected_value = ['message', 'status', 'description']\n\n    @staticmethod\n    def check_json_token(response, expected_value):\n        \"\"\"\n        Check if all required fields are present in the JSON response.\n    \n        Args:\n            response (Response): The response object.\n            expected_value (list): List of expected fields.\n    \n        Returns:\n            None\n        \"\"\"\n        token = json.loads(response.text)\n>       assert list(token) == expected_value\nE       AssertionError\n\nutils\\checking.py:39: AssertionError"}, "description": "INVALID request => Checking received tokens", "steps": [{"name": "GET", "status": "passed", "start": 1705354422035, "stop": 1705354422042}, {"name": "PUT", "status": "passed", "start": 1705354422042, "stop": 1705354422047}], "attachments": [{"name": "stdout", "source": "7e51f088-fc04-4e73-a43a-ce423433c065-attachment.txt", "type": "text/plain"}], "start": 1705354422035, "stop": 1705354422047, "uuid": "e9b8fb4c-9e50-45e0-8281-405e49e4bfd8", "historyId": "92201eefe1d94371aeba4c293ac0223e", "testCaseId": "92201eefe1d94371aeba4c293ac0223e", "fullName": "tests.test_update_expense.Test_update_expense#test_expenses_tokens_invalid_request", "labels": [{"name": "epic", "value": "Update expense method [PUT] v1/expense"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_update_expense"}, {"name": "subSuite", "value": "Test_update_expense"}, {"name": "host", "value": "DESKTOP-PE8TFUJ"}, {"name": "thread", "value": "19092-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_update_expense"}]}