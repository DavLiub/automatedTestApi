{"name": "test_create_new_expense", "status": "failed", "statusDetails": {"message": "AssertionError", "trace": "self = <tests.test_create_expense.Test_create_new_expense object at 0x000001E22B348500>\n\n    @allure.description(\"Create expense -> method POST: VALID request\")\n    def test_create_new_expense(self):\n        \"\"\"\n        Create a new expense with a valid POST request.\n    \n        Steps:\n        1. Create a new expense with valid JSON data.\n        2. Check if the status code of the response is 201 (Created).\n        3. Get the newly created expense by UID.\n        4. Check if the status code of the response is 200 (OK).\n        \"\"\"\n        new_expense_uid = str(uuid.uuid4())\n        json_create_new_expense = {\n            \"expense\": {\n                \"amount\": \"100\",\n                \"category\": \"category\",\n                \"description\": \"description\",\n                \"id\": 0,\n                \"uid\": new_expense_uid,\n                \"created_at\": \"2024-01-13T15:50:40.752Z\"\n            }\n        }\n        result_new_list = Open_api_expense.create_new_expense(json_create_new_expense)\n>       Checking.check_status_code(result_new_list, 201)  # Expected status code: 201 Created\n\ntests\\test_create_expense.py:42: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [400]>, status_code = 201\n\n    @staticmethod\n    def check_status_code(response, status_code):\n        \"\"\"\n        Check if the response status code matches the expected status code.\n    \n        Args:\n            response (Response): The response object.\n            status_code (int): The expected status code.\n    \n        Returns:\n            None\n        \"\"\"\n>       assert status_code == response.status_code\nE       AssertionError\n\nutils\\checking.py:22: AssertionError"}, "description": "Create expense -> method POST: VALID request", "steps": [{"name": "POST", "status": "passed", "start": 1705354416558, "stop": 1705354419471}], "attachments": [{"name": "stdout", "source": "4f524467-aea7-495a-b7f7-fc3534970572-attachment.txt", "type": "text/plain"}], "start": 1705354416558, "stop": 1705354419471, "uuid": "99605a9a-d334-4f5f-ba29-3d0564a38327", "historyId": "21a12047d4487058c7acb780c296e055", "testCaseId": "21a12047d4487058c7acb780c296e055", "fullName": "tests.test_create_expense.Test_create_new_expense#test_create_new_expense", "labels": [{"name": "epic", "value": "Create expense method [POST] v1/expense"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_create_expense"}, {"name": "subSuite", "value": "Test_create_new_expense"}, {"name": "host", "value": "DESKTOP-PE8TFUJ"}, {"name": "thread", "value": "19092-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_create_expense"}]}